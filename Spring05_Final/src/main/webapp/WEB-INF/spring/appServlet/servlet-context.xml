<?xml version="1.0" encoding="UTF-8"?>	
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 
		아래의 MyBatis 관련  설정은 Servers/context.xml 문서에 
		
		<Resource name="jdbc/myoracle" auth="Container"
          type="javax.sql.DataSource" driverClassName="oracle.jdbc.OracleDriver"
          url="jdbc:oracle:thin:@127.0.0.1:1521:xe"
          username="scott" password="tiger" maxTotal="20" maxIdle="10"
          maxWaitMillis="-1"/>
          
     	위와 같은 DB 접속 정보가 있어야만 동작한다.
	-->	
	<beans:bean id="dataSource" 
		class="org.springframework.jndi.JndiObjectFactoryBean">		<!-- JndiObjectFactoryBean 타입.  -->
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>	<!-- bean에서 value를 읽으면 /jdbc/myoracle을 new 하는 것이다. => dataSource = new JndiObjectFactoryBean() -->
	</beans:bean>																									<!-- propertyName은 dataSource의 setter메서드를 호출하는 것이다. -->
	<!-- 
		(1)위의 설정을 java code 로 환산하면
		
		dataSource = new JndiObjectFactoryBean();	(객체를 만들고)
		dataSource.setJudiName("java:comp/env/jdbc/myoracle");	(setter 메서드 호출하는 것이다.)
	 -->																											
	<beans:bean id="sessionFactory" 
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>	<!-- ref="dataSource" 위에것을 참조 하고 있는 것.  ref="참조값 전달할 때", value="문자나 숫자열을 전달할 때" -->
		<beans:property name="configLocation"					
	value="classpath:com/gura/spring05/mybatis/Configuration.xml"/>	<!-- 맵퍼를 준비하는 xml이다. 경로에 주의해서 정확히 써주어야 한다! -->
	<!-- 
		(2)위의 설정을 java code 로 환산하면
		
		sessionFactory = new SqlSessionFactoryBean();	(객체를 만들고)
		sessionFactory.setDataSource(dataSource);	(세터메서드를 호출하고 참조값을 전달함(ref로). dataSource는 이미 위에서 만들어진 참조값.)
		sessionFactory.setConfigLocation("classpath:com/gura/spring05/mybatis/Configuration.xml"); 		(세터 메서드를 호출해서 직접 value를 전달.)
	 -->		
	
	</beans:bean>
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" 
			ref="sessionFactory"/>
	</beans:bean>
	<!-- 
		(3)위의 설정을 java code 로 환산하면
		
		new SqlSessionTemplate(sessionFactory);		(생성자의 인자로 참조값을 전달하면서 객체를 생성한다. 그리고 생성만 하고 변수로 지정하지 않음. => 스프링 빈으로 관리.)
		
		결론: class SqlSessionTemplate implements SqlSession{} 	=> SqlSession 인터페이스를 구현한 클래스를 생성하기 위함이다. 이 객체는 모든 Dao가 의존한다. 그 Dao는 인터페이스 타입으로 의존하는 것이 유리하다.(SqlSession type) 필요할 때 넣어준다.
	 -->
	 
	 

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.gura.spring05" />
	
	
	
</beans:beans>

<!-- 서버가 시작되면 여기있는 내용을 읽고 준비를 한다. Spring04나 Spring01의 init.xml 과 비슷하다고 생각 하면 된다. -->



